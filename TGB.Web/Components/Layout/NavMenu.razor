@using TGB.Web.Models
@implements IDisposable

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider asProvider
@inject Service service

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TGB.Web</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>

                <hr />

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="CreateGroupBank">Create New Group Bank</NavLink>
                </div>

                <div class="nav-item px-3">
                    <button class="" @onclick="ReloadUserBanks">Reload</button>
                    <em>Here are your banks:</em>
                </div>

                @if (banks == null)
                {
                    <p><em>Nothing to show...</em></p>
                }
                else
                {
                    @foreach (var bank in banks)
                    {
                        var url = $"Bank/{bank.Name}";
                        var urlNotes = $"Bank/{bank.Name}/Notes";


                        <div class="d-flex nav-item ps-2">

                            <div class="">
                                <a class="nav-link px-3" href="@url">
                                    @bank.Name
                                </a>
                            </div>

                            <div class="vr"></div>

                            <div class="">
                                <a class="nav-link px-3" href="@urlNotes">
                                    Notes
                                </a>
                            </div>
                        </div>
                    }
                }



                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private List<GroupBankVM> banks;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private async Task ReloadUserBanks()
    {
        banks = await GetUserBanks();
    }

    private async Task<List<GroupBankVM>> GetUserBanks()
    {
        var user = (await asProvider.GetAuthenticationStateAsync())?.User;
        if (user == null || !user.HasClaim(c => c.Type == TgbClaimTypes.GroupBankUserClaim))
        {
            return null;
        }

        var gbs = await service.GetGroupBanksForUser(user);
        return gbs.Select(gb => new GroupBankVM(gb)).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        banks = await GetUserBanks();
    }
}

