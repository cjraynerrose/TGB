@page "/Campaign/{RouteCampaignName}"
@rendermode InteractiveServer
@inject Service service
@inject GroupBankService gbService
@inject AuthenticationStateProvider asProvider
@inject IJSRuntime JS
@using System.Security.Claims
@using TGB.Domain.Entities
@using TGB.Web.Models

<HeadContent>
    <script src="/lib/tiny-markdown-editor/dist/tiny-mde.min.js"></script>
    <link rel="stylesheet"
          type="text/css"
          href="/lib/tiny-markdown-editor/dist/tiny-mde.min.css" />
</HeadContent>

<AuthorizeView>
    <NotAuthorized>
        <p>You are not authorized to view this page.</p>
    </NotAuthorized>
    <Authorized>
        <div class="flex-column">
            <div class="d-flex mb-3">
                <h1>@RouteCampaignName</h1>
                <div class="my-auto ms-5">
                <a href="Campaign/@RouteCampaignName/Users">Users</a>
            </div>
                <div class="mx-auto">
                    <InputText @bind-Value="SearchQuery" placeholder="Search name and desc" />
                    <button>Search</button>
                    <button @onclick="() => SearchQuery = string.Empty">Clear</button>
                </div>
                <div class="ms-auto">
                    <InputText @bind-Value="TagQuery" placeholder="Filter tags" />
                    <button>Go</button>
                    <button @onclick="() => TagQuery = string.Empty">Clear</button>
                </div>
            </div>

            <div class="d-flex">
                <table class="table table-striped table-hover">
                    <thead class="table-primary">
                        <tr>
                            <td class="name-col" scope="col">Name</td>
                            <td class="num-col" scope="col">#</td>
                            <td class="desc-col" scope="col">Summary</td>
                            <td class="tags-col" scope="col">Tags</td>
                            <td class="acts-col" scope="col">Actions</td>
                        </tr>
                    </thead>
                    <tbody>
                        @if (BankVM == null)
                        {
                            <tr>
                                <td colspan="5">@TableDataPlaceholder</td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td scope="row">
                                    <InputText @bind-Value="NewRecordVM.Name" placeholder="Name" />
                                </td>
                                <td>
                                    <InputNumber @bind-Value="NewRecordVM.Amount" placeholder="Amount" />
                                </td>
                                <td>
                                    <InputText @bind-Value="NewRecordVM.ShortDescription" placeholder="Summary" />
                                </td>
                                <td>
                                    <InputText @bind-Value="NewRecordVM.Tags" placeholder="semi-colon;seperated;tags" />
                                </td>
                                <td>
                                    <button class="btn btn-success btn-sm" @onclick="AddRecord">Add</button>
                                </td>

                            </tr>

                            @foreach (var record in Filter())
                            {
                                var css = record.UnsavedChanges ? "table-warning" : "";

                                <tr @key=record class="@css">
                                    <td scope="row">
                                        <InputText @bind-Value="record.Name" />
                                    </td>
                                    <td>
                                        <InputNumber @bind-Value="record.Amount" />
                                    </td>
                                    <td>
                                        <InputText @bind-Value="record.ShortDescription" />
                                    </td>
                                    <td>
                                        <InputText @bind-Value="record.Tags" />
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-primary btn-sm" @onclick="@(e => UpdateRecord(e, record))">Update</button>
                                            <button type="button" class="btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                               <span class="visually-hidden">Toggle Dropdown</span>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <button class="dropdown-item" @onclick="@(e => DeleteRecord(e, record))">Delete</button>
                                                    <button class="dropdown-item"
                                                            data-bs-toggle="modal" 
                                                            data-bs-target="#recordModal"
                                                            @onclick="@(e => SelectFocusRecord(e, record))">
                                                        Embiggen
                                                        </button>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>

        @* Display Item Modal *@
        @* https://getbootstrap.com/docs/5.3/components/modal/#varying-modal-content *@
        <div class="modal modal-lg fade" id="recordModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">
                            <div class="d-inline-flex">
                                <input class="sutble-input" @bind-value="FocusRecordVM.Name" />
                                <input class="sutble-input" @bind-value="FocusRecordVM.Amount" />
                            </div>
                        </h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div>
                            <input class="sutble-input" @bind-value="FocusRecordVM.ShortDescription" />

                            <div id="toolbar"></div>
                            <textarea id="editor" @bind="FocusRecordVM.Description"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div class="d-inline-flex">
                            <input class="sutble-input me-auto" @bind-value="FocusRecordVM.Tags" />
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary" @onclick="@(e => UpdateFocusRecord(e, FocusRecordVM))">Update</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script type="text/javascript">
            var tinyMDE;
            var commandBar;

            function openMdEditor(description) {
                if(typeof tinyMDE === 'undefined'
                    || document.querySelector("div.TinyMDE") === null ){
                    tinyMDE = new TinyMDE.Editor({ element: "editor", content: description });
                    commandBar = new TinyMDE.CommandBar({
                        element: "toolbar",
                        editor: tinyMDE,
                    });
                }
                else{
                    tinyMDE.setContent(description);
                }
            }
        </script>
    </Authorized>
</AuthorizeView>



@code {
    [Parameter]
    public string? RouteCampaignName { get; set; }

    public GroupBankVM BankVM;

    private ClaimsPrincipal User;


    private RecordVM NewRecordVM = new();
    private RecordVM FocusRecordVM = new();

    private string TableDataPlaceholder = "Loading...";

    private bool UnsavedChanges = false;

    private string TagQuery = string.Empty;
    private string SearchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        User = (await asProvider.GetAuthenticationStateAsync())?.User;
        if(User is null)
        {
            return;
        }

        var campaigns = await gbService.GetCampaignsForUser(User);
        var id = campaigns.FirstOrDefault(b => b.Name == RouteCampaignName)?.Id;

        if(id is null)
        {
            return;
        }

        var campaign = await gbService.GetCampaign(id.Value);

        BankVM = new GroupBankVM(campaign.GroupBank);
    }


    protected async override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(!firstRender && BankVM is null)
        {
            TableDataPlaceholder = "Bank not found.";
        }
    }

    private List<RecordVM> Filter()
    {
        if (BankVM is null)
        {
            return new();
        }

        var records = BankVM.Records;

        records = FilterRecordsByTag(records);
        records = FilterRecordaByNameandDesc(records);

        return records;
    }

    private List<RecordVM> FilterRecordsByTag(List<RecordVM> records)
    {
        if(string.IsNullOrWhiteSpace(TagQuery))
        {
            return records;
        }

        var queryTags = TagHelpers.UnflattenTags(TagHelpers.FormatTags(TagQuery));

        if(queryTags is null || queryTags.Count == 0)
        {
            return records;
        }

        return records.Where(r => TagHelpers.UnflattenTags(r.Tags).Intersect(queryTags).Any()).ToList();
    }

    private List<RecordVM> FilterRecordaByNameandDesc(List<RecordVM> records)
    {
        if(string.IsNullOrWhiteSpace(SearchQuery))
        {
            return records;
        }

        return records
            .Where(r => 
                r.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)
                || r.Description.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task UpdateRecord(MouseEventArgs e, RecordVM recordVM)
    {
        var record = await service.UpdateRecord(recordVM.ToRecord());

        var idx = BankVM.Records.FindIndex(r => r.Id == record.Id);
        BankVM.Records[idx] = new RecordVM(record);
    }

    private async Task UpdateFocusRecord(MouseEventArgs e, RecordVM recordVM)
    {
        var desc = await JS.InvokeAsync<string>("tinyMDE.getContent");

        recordVM.Description = desc;

        await UpdateRecord(e, recordVM);
    }

    private async Task SelectFocusRecord(MouseEventArgs eventArgs, RecordVM record)
    {
        FocusRecordVM = record;
        await JS.InvokeVoidAsync("openMdEditor", record.Description);
    }


    private async Task AddRecord()
    {
        var record = await service.CreateRecord(NewRecordVM.ToRecord(), BankVM.Id);
        BankVM.Records.Add(new RecordVM(record));

        NewRecordVM = new();
    }

    private void ClearNewRecord()
    {
        NewRecordVM = new();
    }

    private async Task DeleteRecord(MouseEventArgs e, RecordVM record)
    {
        await service.DeleteRecord(record.Id);
        BankVM.Records.Remove(record);
    }

    
}
