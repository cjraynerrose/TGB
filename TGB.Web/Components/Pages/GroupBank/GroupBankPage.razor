@page "/Bank/{RouteBankName}"
@rendermode InteractiveServer
@inject Service service
@inject GroupBankService gbService
@inject AuthenticationStateProvider asProvider
@using System.Security.Claims
@using TGB.Domain.Entities
@using TGB.Web.Models

<AuthorizeView>
    <NotAuthorized>
        <p>You are not authorized to view this page.</p>
    </NotAuthorized>
    <Authorized>
        <div class="flex-column">
            <div class="d-flex mb-3">
                <h1>@RouteBankName</h1>
                <div class="my-auto ms-5">
                <a href="Bank/@RouteBankName/Users">Users</a>
            </div>
                <div class="mx-auto">
                    <InputText @bind-Value="SearchQuery" placeholder="Search name and desc" />
                    <button>Search</button>
                    <button @onclick="() => SearchQuery = string.Empty">Clear</button>
                </div>
                <div class="ms-auto">
                    <InputText @bind-Value="TagQuery" placeholder="Filter tags" />
                    <button>Go</button>
                    <button @onclick="() => TagQuery = string.Empty">Clear</button>
                </div>
            </div>

            <div class="d-flex">
                <table class="table table-striped table-hover">
                    <thead class="table-primary">
                        <tr>
                            <td class="name-col" scope="col">Name</td>
                            <td class="num-col" scope="col">#</td>
                            <td class="desc-col" scope="col">Description</td>
                            <td class="tags-col" scope="col">Tags</td>
                            <td class="acts-col" scope="col">Actions</td>
                        </tr>
                    </thead>
                    <tbody>
                        @if (BankVM == null)
                        {
                            <tr>
                                <td colspan="5">@TableDataPlaceholder</td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td scope="row">
                                    <InputText @bind-Value="NewRecordVM.Name" placeholder="Name" />
                                </td>
                                <td>
                                    <InputNumber @bind-Value="NewRecordVM.Amount" placeholder="Amount" />
                                </td>
                                <td>
                                    <InputText @bind-Value="NewRecordVM.Description" placeholder="Description" />
                                </td>
                                <td>
                                    <InputText @bind-Value="NewRecordVM.Tags" placeholder="semi-colon;seperated;tags" />
                                </td>
                                <td>
                                    <button class="btn btn-success btn-sm" @onclick="AddRecord">Add</button>
                                </td>

                            </tr>

                            @foreach (var record in Filter())
                            {
                                var css = record.UnsavedChanges ? "table-warning" : "";

                                <tr @key=record class="@css">
                                    <td scope="row">
                                        <InputText @bind-Value="record.Name" />
                                    </td>
                                    <td>
                                        <InputNumber @bind-Value="record.Amount" />
                                    </td>
                                    <td>
                                        <InputText @bind-Value="record.Description" />
                                    </td>
                                    <td>
                                        <InputText @bind-Value="record.Tags" />
                                    </td>
                                    <td>
                                        <div class="btn-group">
                                            <button type="button" class="btn btn-primary btn-sm" @onclick="@(e => UpdateRecord(e, record))">Update</button>
                                            <button type="button" class="btn btn-primary btn-sm dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                                               <span class="visually-hidden">Toggle Dropdown</span>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <a class="dropdown-item" href="#" @onclick="@(e => DeleteRecord(e, record))">Delete</a>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>

            </div>


        </div>
    </Authorized>
</AuthorizeView>



@code {
    [Parameter]
    public string? RouteBankName { get; set; }

    public GroupBankVM BankVM;

    private ClaimsPrincipal User;


    private RecordVM NewRecordVM = new();

    private string TableDataPlaceholder = "Loading...";

    private bool UnsavedChanges = false;

    private string TagQuery = string.Empty;
    private string SearchQuery = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        User = (await asProvider.GetAuthenticationStateAsync())?.User;
        if(User is null)
        {
            return;
        }

        var banks = await gbService.GetGroupBanksForUser(User);
        var id = banks.FirstOrDefault(b => b.Name == RouteBankName)?.Id;

        if(id is null)
        {
            return;
        }

        var bank = await gbService.GetGroupBank(id.Value);
            BankVM = new GroupBankVM(bank);
        }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(!firstRender && BankVM is null)
        {
            TableDataPlaceholder = "Bank not found.";
        }
    }

    private List<RecordVM> Filter()
    {
        if (BankVM is null)
        {
            return new();
        }

        var records = BankVM.Records;

        records = FilterRecordsByTag(records);
        records = FilterRecordaByNameandDesc(records);

        return records;
    }

    private List<RecordVM> FilterRecordsByTag(List<RecordVM> records)
    {
        if(string.IsNullOrWhiteSpace(TagQuery))
        {
            return records;
        }

        var queryTags = TagHelpers.UnflattenTags(TagHelpers.FormatTags(TagQuery));

        if(queryTags is null || queryTags.Count == 0)
        {
            return records;
        }

        return records.Where(r => TagHelpers.UnflattenTags(r.Tags).Intersect(queryTags).Any()).ToList();
    }

    private List<RecordVM> FilterRecordaByNameandDesc(List<RecordVM> records)
    {
        if(string.IsNullOrWhiteSpace(SearchQuery))
        {
            return records;
        }

        return records
            .Where(r => 
                r.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)
                || r.Description.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }


    private async Task UpdateRecord(MouseEventArgs e, RecordVM recordVM)
    {
        var record = await service.UpdateRecord(recordVM.ToRecord());

        var idx = BankVM.Records.FindIndex(r => r.Id == record.Id);
        BankVM.Records[idx] = new RecordVM(record);
    }


    private async Task AddRecord()
    {
        var record = await service.CreateRecord(NewRecordVM.ToRecord(), BankVM.Id);
        BankVM.Records.Add(new RecordVM(record));

        NewRecordVM = new();
    }

    private void ClearNewRecord()
    {
        NewRecordVM = new();
    }

    private async Task DeleteRecord(MouseEventArgs e, RecordVM record)
    {
        await service.DeleteRecord(record.Id);
        BankVM.Records.Remove(record);
    }
}
